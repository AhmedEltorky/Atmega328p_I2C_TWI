
Atmega328p_I2C_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000013c  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000824  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000736  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000338  00000000  00000000  000011be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000014f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000418  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000075  00000000  00000000  00001974  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000019e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e3       	ldi	r30, 0x3C	; 60
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  8e:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <i2c_start>:
		_delay_ms(100);
    }
}

void i2c_start (void) {
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
  96:	84 ea       	ldi	r24, 0xA4	; 164
  98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1 << TWINT)));
  9c:	ec eb       	ldi	r30, 0xBC	; 188
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	88 23       	and	r24, r24
  a4:	ec f7       	brge	.-6      	; 0xa0 <i2c_start+0xa>
}
  a6:	08 95       	ret

000000a8 <i2c_write>:

void i2c_write (unsigned char data) {
	TWDR = data;
  a8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1 << TWINT) | (1 << TWEN);
  ac:	84 e8       	ldi	r24, 0x84	; 132
  ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1 << TWINT)));	
  b2:	ec eb       	ldi	r30, 0xBC	; 188
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	88 23       	and	r24, r24
  ba:	ec f7       	brge	.-6      	; 0xb6 <i2c_write+0xe>
}
  bc:	08 95       	ret

000000be <i2c_read>:

unsigned char i2c_read (void) {
	TWCR = (1 << TWINT) | (1 << TWEN);
  be:	84 e8       	ldi	r24, 0x84	; 132
  c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1 << TWINT)));
  c4:	ec eb       	ldi	r30, 0xBC	; 188
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	88 23       	and	r24, r24
  cc:	ec f7       	brge	.-6      	; 0xc8 <i2c_read+0xa>
	return TWDR;
  ce:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
  d2:	08 95       	ret

000000d4 <main>:
unsigned char slaveReadAddress = 0b00000111; // SLA + R/W : slave address is 0000011 and read 1

int main(void)
{
	// I2C initialization as Master
	TWSR &= ~(1 << TWPS0) & ~(1 << TWPS1); // set prescaler to zero
  d4:	e9 eb       	ldi	r30, 0xB9	; 185
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	8c 7f       	andi	r24, 0xFC	; 252
  dc:	80 83       	st	Z, r24
	TWBR = 0x47; // SCL freq. is 50K for F_CPU = 8M
  de:	87 e4       	ldi	r24, 0x47	; 71
  e0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	
	unsigned char oldData = 0;
  e4:	d0 e0       	ldi	r29, 0x00	; 0
	while (!(TWCR & (1 << TWINT)));
	return TWDR;
}

void i2c_stop (void) {
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
  e6:	0f 2e       	mov	r0, r31
  e8:	fc eb       	ldi	r31, 0xBC	; 188
  ea:	ef 2e       	mov	r14, r31
  ec:	f1 2c       	mov	r15, r1
  ee:	f0 2d       	mov	r31, r0
  f0:	14 e9       	ldi	r17, 0x94	; 148
	
    while (1) 
    {
		unsigned char data;
		// read data from read slave
		i2c_start();
  f2:	0e 94 4b 00 	call	0x96	; 0x96 <i2c_start>
		i2c_write(slaveReadAddress);
  f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  fa:	0e 94 54 00 	call	0xa8	; 0xa8 <i2c_write>
		data = i2c_read();
  fe:	0e 94 5f 00 	call	0xbe	; 0xbe <i2c_read>
 102:	c8 2f       	mov	r28, r24
	while (!(TWCR & (1 << TWINT)));
	return TWDR;
}

void i2c_stop (void) {
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
 104:	f7 01       	movw	r30, r14
 106:	10 83       	st	Z, r17
		i2c_start();
		i2c_write(slaveReadAddress);
		data = i2c_read();
		i2c_stop();

		if (data != oldData) {
 108:	d8 17       	cp	r29, r24
 10a:	59 f0       	breq	.+22     	; 0x122 <main+0x4e>
			i2c_start();
 10c:	0e 94 4b 00 	call	0x96	; 0x96 <i2c_start>
			i2c_write(slaveWriteAddress);
 110:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <slaveWriteAddress>
 114:	0e 94 54 00 	call	0xa8	; 0xa8 <i2c_write>
			i2c_write(data);
 118:	8c 2f       	mov	r24, r28
 11a:	0e 94 54 00 	call	0xa8	; 0xa8 <i2c_write>
	while (!(TWCR & (1 << TWINT)));
	return TWDR;
}

void i2c_stop (void) {
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
 11e:	f7 01       	movw	r30, r14
 120:	10 83       	st	Z, r17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	ff ef       	ldi	r31, 0xFF	; 255
 124:	20 e7       	ldi	r18, 0x70	; 112
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	f1 50       	subi	r31, 0x01	; 1
 12a:	20 40       	sbci	r18, 0x00	; 0
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0x54>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x5e>
 132:	00 00       	nop
 134:	dc 2f       	mov	r29, r28
 136:	dd cf       	rjmp	.-70     	; 0xf2 <main+0x1e>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
